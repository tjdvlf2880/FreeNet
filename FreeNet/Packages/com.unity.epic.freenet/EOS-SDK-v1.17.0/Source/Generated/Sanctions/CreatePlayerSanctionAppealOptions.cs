// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Sanctions
{
	/// <summary>
	/// Input parameters for the <see cref="SanctionsInterface.CreatePlayerSanctionAppeal" /> function.
	/// </summary>
	public struct CreatePlayerSanctionAppealOptions
	{
		/// <summary>
		/// The Product User ID of the local user sending their own sanction appeal.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// Reason code for the appeal.
		/// </summary>
		public SanctionAppealReason Reason { get; set; }

		/// <summary>
		/// A unique identifier for the specific sanction
		/// </summary>
		public Utf8String ReferenceId { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct CreatePlayerSanctionAppealOptionsInternal : ISettable<CreatePlayerSanctionAppealOptions>, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_LocalUserId;
		private SanctionAppealReason m_Reason;
		private System.IntPtr m_ReferenceId;

		public ProductUserId LocalUserId
		{
			set
			{
				Helper.Set(value, ref m_LocalUserId);
			}
		}

		public SanctionAppealReason Reason
		{
			set
			{
				m_Reason = value;
			}
		}

		public Utf8String ReferenceId
		{
			set
			{
				Helper.Set(value, ref m_ReferenceId);
			}
		}

		public void Set(ref CreatePlayerSanctionAppealOptions other)
		{
			m_ApiVersion = SanctionsInterface.CreateplayersanctionappealApiLatest;
			LocalUserId = other.LocalUserId;
			Reason = other.Reason;
			ReferenceId = other.ReferenceId;
		}

		public void Set(ref CreatePlayerSanctionAppealOptions? other)
		{
			if (other.HasValue)
			{
				m_ApiVersion = SanctionsInterface.CreateplayersanctionappealApiLatest;
				LocalUserId = other.Value.LocalUserId;
				Reason = other.Value.Reason;
				ReferenceId = other.Value.ReferenceId;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_LocalUserId);
			Helper.Dispose(ref m_ReferenceId);
		}
	}
}