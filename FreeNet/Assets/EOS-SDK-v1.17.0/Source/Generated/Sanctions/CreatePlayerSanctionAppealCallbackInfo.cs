// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Sanctions
{
	/// <summary>
	/// Output parameters for the <see cref="CreatePlayerSanctionAppealCallbackInfo" /> function.
	/// </summary>
	public struct CreatePlayerSanctionAppealCallbackInfo : ICallbackInfo
	{
		/// <summary>
		/// The <see cref="Result" /> code for the operation. <see cref="Result.Success" /> indicates that the operation succeeded; other codes indicate errors.
		/// </summary>
		public Result ResultCode { get; set; }

		/// <summary>
		/// Context that was passed into <see cref="SanctionsInterface.CreatePlayerSanctionAppeal" />.
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// A unique identifier for the specific sanction that was appealed
		/// </summary>
		public Utf8String ReferenceId { get; set; }

		public Result? GetResultCode()
		{
			return ResultCode;
		}

		internal void Set(ref CreatePlayerSanctionAppealCallbackInfoInternal other)
		{
			ResultCode = other.ResultCode;
			ClientData = other.ClientData;
			ReferenceId = other.ReferenceId;
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct CreatePlayerSanctionAppealCallbackInfoInternal : ICallbackInfoInternal, IGettable<CreatePlayerSanctionAppealCallbackInfo>, ISettable<CreatePlayerSanctionAppealCallbackInfo>, System.IDisposable
	{
		private Result m_ResultCode;
		private System.IntPtr m_ClientData;
		private System.IntPtr m_ReferenceId;

		public Result ResultCode
		{
			get
			{
				return m_ResultCode;
			}

			set
			{
				m_ResultCode = value;
			}
		}

		public object ClientData
		{
			get
			{
				object value;
				Helper.Get(m_ClientData, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_ClientData);
			}
		}

		public System.IntPtr ClientDataAddress
		{
			get
			{
				return m_ClientData;
			}
		}

		public Utf8String ReferenceId
		{
			get
			{
				Utf8String value;
				Helper.Get(m_ReferenceId, out value);
				return value;
			}

			set
			{
				Helper.Set(value, ref m_ReferenceId);
			}
		}

		public void Set(ref CreatePlayerSanctionAppealCallbackInfo other)
		{
			ResultCode = other.ResultCode;
			ClientData = other.ClientData;
			ReferenceId = other.ReferenceId;
		}

		public void Set(ref CreatePlayerSanctionAppealCallbackInfo? other)
		{
			if (other.HasValue)
			{
				ResultCode = other.Value.ResultCode;
				ClientData = other.Value.ClientData;
				ReferenceId = other.Value.ReferenceId;
			}
		}

		public void Dispose()
		{
			Helper.Dispose(ref m_ClientData);
			Helper.Dispose(ref m_ReferenceId);
		}

		public void Get(out CreatePlayerSanctionAppealCallbackInfo output)
		{
			output = new CreatePlayerSanctionAppealCallbackInfo();
			output.Set(ref this);
		}
	}
}